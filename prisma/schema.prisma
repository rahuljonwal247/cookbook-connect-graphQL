generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes    Recipe[]
  ratings    Rating[]
  comments   Comment[]
  followers  Follow[] @relation("UserFollowers")
  following  Follow[] @relation("UserFollowing")

  @@map("users")
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String?
  cuisine     String?
  difficulty  Int      @default(1) // 1-5 scale
  cookTime    Int      // in minutes
  servings    Int      @default(1)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId     String
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ingredients  Ingredient[]
  instructions Instruction[]
  ratings      Rating[]
  comments     Comment[]

  @@map("recipes")
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  quantity String
  unit     String?

  // Relations
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

model Instruction {
  id          String @id @default(cuid())
  step        Int
  description String

  // Relations
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("instructions")
}

model Rating {
  id    String @id @default(cuid())
  value Int    // 1-5 stars
  createdAt DateTime @default(now())

  // Relations
  userId   String
  recipeId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("ratings")
}

model Comment {
  id      String @id @default(cuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  recipeId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id String @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  followerId  String
  followingId String
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}