# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FeedUser {
  id: ID!
  username: String!
  firstName: String
  lastName: String
  avatar: String
}

type FeedRecipe {
  id: ID!
  title: String!
  cuisine: String
  imageUrl: String
}

type User {
  id: ID!
  email: String!
  username: String!
  firstName: String
  lastName: String
  avatar: String
  bio: String
  createdAt: DateTime!
  updatedAt: DateTime!
  followersCount: Int
  followingCount: Int
  recipesCount: Int
  isFollowing: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthPayload {
  user: User!
  token: String!
}

type Recipe {
  id: ID!
  title: String!
  description: String
  cuisine: String
  difficulty: Int!
  cookTime: Int!
  servings: Int!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: String!
  author: User!
  ingredients: [Ingredient!]!
  instructions: [Instruction!]!
  ratings: [Rating!]!
  comments: [Comment!]!
  averageRating: Float
  commentCount: Int!
}

type Ingredient {
  id: ID!
  name: String!
  quantity: String!
  unit: String
  recipeId: String!
}

type Instruction {
  id: ID!
  step: Int!
  description: String!
  recipeId: String!
}

type Rating {
  id: ID!
  value: Int!
  createdAt: DateTime!
  userId: String!
  recipeId: String!
  user: User!
}

type Comment {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  recipeId: String!
  user: User!
}

type SearchRecipesResult {
  recipes: [Recipe!]!
  total: Int!
  skip: Int!
  take: Int!
}

type Query {
  users: [User!]!
  user(id: ID!): User!
  me: User!
  recipes(offset: Int = 0, limit: Int = 20): [Recipe!]!
  recipe(id: ID!): Recipe!
  searchRecipes(input: SearchRecipesInput!): SearchRecipesResult!
  recipesByIngredients(ingredients: [String!]!): [Recipe!]!
  userFeed(offset: Int = 0, limit: Int = 20): [Recipe!]!
}

input SearchRecipesInput {
  query: String
  ingredients: [String!]
  cuisine: String
  difficulty: Int
  maxCookTime: Int
  minRating: Int
  skip: Int! = 0
  take: Int! = 20
  sortBy: String
}

type Mutation {
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  updateProfile(input: UpdateUserInput!): User!
  deleteAccount: String!
  createRecipe(createRecipeInput: CreateRecipeInput!): Recipe!
  updateRecipe(updateRecipeInput: UpdateRecipeInput!): Recipe!
  removeRecipe(id: ID!): Boolean!
  rateRecipe(recipeId: ID!, value: Int!): Rating!
  addComment(recipeId: ID!, content: String!): Comment!
}

input RegisterInput {
  email: String!
  username: String!
  password: String!
  firstName: String
  lastName: String
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  avatar: String
  bio: String
}

input CreateRecipeInput {
  title: String!
  description: String
  cuisine: String
  difficulty: Int! = 1
  cookTime: Int!
  servings: Int! = 1
  imageUrl: String
  ingredients: [CreateIngredientInput!]!
  instructions: [CreateInstructionInput!]!
}

input CreateIngredientInput {
  name: String!
  quantity: String!
  unit: String
}

input CreateInstructionInput {
  step: Int!
  description: String!
}

input UpdateRecipeInput {
  title: String
  description: String
  cuisine: String
  difficulty: Int = 1
  cookTime: Int
  servings: Int = 1
  imageUrl: String
  ingredients: [CreateIngredientInput!]
  instructions: [CreateInstructionInput!]
  id: ID!
}